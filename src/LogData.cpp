#include "LogData.hpp"

namespace weblog {

/**
 * @brief Construct a new Log Data:: Log Data object
 *
 * The function name, line number and file name are generated by the compiler.
 * It creates and formats the time stamp at creation.
 * @param level The log level.
 * @param function The function name in which the object was created.
 * @param line The line number where the object was created.
 * @param file The file name where the object was created.
 */
LogData::LogData(LogLevel level, const char* function, size_t line, const char* file)
	: m_level(level)
	, m_function(function)
	, m_line(line)
	, m_file(file)
{
	formatTime();
}

/**
 * @brief Get the log message.
 *
 * @return const std::string& The log message.
 */
const std::string& LogData::getMessage() const { return m_message; }

/**
 * @brief Get the log level.
 *
 * @return const LogLevel& The log level.
 */
const LogLevel& LogData::getLevel() const { return m_level; }

const char * LogData::levelToString(LogLevel level)
{
	switch (level) {
	case LevelDebug:
		return "DEBUG";
	case LevelInfo:
		return "INFO";
	case LevelWarn:
		return "WARN";
	case LevelError:
		return "ERROR";
	default:
		return "UNKNOWN";
	}
}

/**
 * @brief Get the formatted time.
 *
 * @return const std::string& The formatted time.
 */
const std::string& LogData::getFormattedTime() const { return m_formattedTime; }

/**
 * @brief Get the line number.
 *
 * @return const size_t& The line number.
 */
const size_t& LogData::getLine() const { return m_line; }

/**
 * @brief Get the function name.
 *
 * @return const char* The function name.
 */
const char* LogData::getFunction() const { return m_function; }

/**
 * @brief Get the file name.
 *
 * @return const char* The file name.
 */
const char* LogData::getFile() const { return m_file; }

/**
 * @brief Create and format the timestamp of object creation.
 *
 * The formatTime function gets the current time and converts it to a human-readable string.
 */
void LogData::formatTime()
{
	// Get current time
	time_t now = time(0);

	// Use ctime to convert time_t to a human-readable string (not thread-safe)
	const int maxTimeString = 80;
	char buffer[maxTimeString];
	(void)strftime((char*)buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S ", localtime(&now));
	m_formattedTime = (char*)buffer;
}

} // weblog
